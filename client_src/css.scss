/*
- tags are used to represent the layout mode: row, col or grid
- not using full black or full white as such a contrast will provoke strain for the eyes
  - the difference between whites and blanks is just enough so that you can distinguish them
- default size of containers is max-content, which means it goes to oo, and then shrinks without affecting the content
  - when setting a fixed size, the content might overflow, so it should either be wrapped (lib_wrap) or scrolled (default)
  - default flexbox shrinking is disabled, because it would go against max-content when scrolling is required
- cards should be used for content managing
  - cards are just rectangles with round corners
  - often you can just use the lib_border class to make a card
  - if you use an image as background, and you decide to overlay some text without using lib_border:
    - you need to add some padding: `padding: var(--lib_spacing)`
    - set `lib_transparent` to your content so that you can be sure it is visible
- current style, while not being the most flat possible, covers all the overlay use-cases
- the style can be used in the page using lib_start class:
  - use lib_external to temporarily stop the propagation
- lib_start class only indicates that the next code is compatible with the library
  - DO NOT use styles or other classes on the lib_start element, it is just an interface between code bases
*/

/*
<html><head>

<!-- library setup -->
<link rel="stylesheet" href="css.css">
<script src="js.js"></script>
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<style>
  icon {
    font-family: 'Material Symbols Rounded';
    font-variation-settings: 'FILL' 1, 'wght' 400, 'GRAD' 0, 'opsz' 48;
  }
</style>

</head>
<body class="lib_start"><lib_col class="lib_window lib_dark">
  
</lib_col></body></html>
*/

body.lib_start {margin: 0px;}
.lib_start { /* we must put everything inside, otherwise the CSS will fail due specificity problems */
  font-family: monospace; /* very useful if the symbols follow a grid */

  --lib_dark: hsl(0, 0%, 10%);
  --lib_light: hsl(0, 0%, 90%);
  --lib_spacing: 1mm; /* spacing should be enough so that elements can be distinguished */

  * {
    /* use max-content by default, so the size of containers are predictable, unlike auto */
    width: max-content;
    height: max-content;

    position: relative; /* required to use easily <position: absolute> in any container */
    box-sizing: border-box;

    /* no wrapping, just scrolling by default */
    white-space: nowrap;
    overflow: auto;
    flex-shrink: 0;

    text-align: center;

    border-radius: var(--lib_spacing);
  }

  /* [layout modes] */
  lib_row {
    display: flex;
    flex-direction: row;
    gap: var(--lib_spacing);
    align-items: center;
    justify-items: center;
    align-content: center;
  }
  lib_row:not(.lib_align_mod) > * {margin-top: auto; margin-bottom: auto;}
  lib_row:not(.lib_justify_mod) > *:first-child {margin-left: auto;}
  lib_row:not(.lib_justify_mod) > *:not(.lib_absolute):last-child {margin-right: auto;}
  lib_col {
    display: flex;
    flex-direction: column;
    gap: var(--lib_spacing);
    align-items: center;
    justify-items: center;
    align-content: center;
  }
  lib_col:not(.lib_align_mod) > * {margin-left: auto; margin-right: auto;}
  lib_col:not(.lib_justify_mod) > *:first-child {margin-top: auto;}
  lib_col:not(.lib_justify_mod) > *:not(.lib_absolute):last-child {margin-bottom: auto;}
  lib_col.lib_justify_mod > *:first-child {margin-top: unset;}
  lib_col.lib_justify_mod > *:not(.lib_absolute):last-child {margin-bottom: unset;}
  lib_grid {
    display: grid;
    gap: var(--lib_spacing);
    align-items: center;
    justify-items: center;
  }
  lib_grid > * { /* higher specifity required */
    width: 100%; height: 100%;
  }

  /* [scrollbar] */
  ::-webkit-scrollbar {
    width: calc(3 * var(--lib_spacing)); /* Adjust the width of the scrollbar */
    height: calc(3 * var(--lib_spacing)); /* Adjust the width of the scrollbar */
  }
  ::-webkit-scrollbar-thumb {
    background: var(--lib_background_border); /* Replace with the desired color */
    border-width: var(--lib_spacing);
    border-style: solid;
    border-color: var(--lib_background);
    border-radius: calc(2 * var(--lib_spacing));
  }
  ::-webkit-scrollbar-corner {
    background: var(--lib_background); /* Replace with the desired color */
  }

  /* [classes] */
  .lib_window {
    background: var(--lib_background);
    padding: var(--lib_spacing);
    color: var(--lib_foreground);
    width: 100vw;
    height: 100vh;
    border-radius: 0px;
    --lib_sel_color: var(--lib_background_border);
  }
  .lib_border {
    padding: var(--lib_spacing);
    border: 1px solid var(--lib_background_border);
    border-bottom-width: 2px;
  }
  .lib_wrap { /* deprecated. use the property as-is */
    flex-wrap: wrap;
  }
  .lib_text_wrap {
    display: unset;
    white-space: break-spaces;
  }
  .lib_cover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  /* [internal] */
  #lib_tooltip {
    display: none;
    position: absolute;
    border-radius: var(--lib_spacing);
    padding: var(--lib_spacing);
    background: var(--lib_background);
    z-index: 1;
  }
  lib_demo {
    background: var(--lib_foreground);
    height: .5em;
    border-radius: .5em;
    margin-top: .25em !important;
    margin-bottom: .25em !important;
  }

  /* [progress] */
  .lib_progress::before {
    content: "";
    width: var(--lib_progress);
    height: 100%;
    position: absolute;
    background: var(--lib_background_progress);
    margin: calc(0px - var(--lib_spacing));
    z-index: -1;
    border-radius: calc(var(--lib_spacing) / 2);
  }
  .lib_progress {
    z-index: 0;

    border-radius: var(--lib_spacing);
    padding: calc(var(--lib_spacing));

    border-width: 1px;
    border-style: solid;
    border-color: var(--lib_background_border);
    border-bottom-width: 2px;

    color: var(--lib_foreground);
    --lib_sel_color: var(--lib_background_border);
  }

  /* [input fixes] */
  textarea, textarea:focus-visible, input, input:focus-visible {
    background: unset;
    color: unset;
    border-width: 0px;
    outline: unset;
    font-family: unset;
    font-size: unset;
    caret-color: var(--lib_foreground);
    text-align: start;
  }
  ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
    color: var(--lib_foreground_disabled);
    opacity: 1; /* Firefox */
  }
  ::selection {
    background: var(--lib_sel_color);
  }
  .lib_transparent {
    background: var(--lib_transparent);
    /* backdrop-filter: blur(1px); */
  }

  /* [themes] */
  .lib_light {
    --lib_background: hsl(0, 0%, 90%);
    --lib_background_progress: hsl(0, 0%, 80%);
    --lib_background_border: hsl(0, 0%, 70%);
    --lib_foreground_disabled: hsl(0, 0%, 30%);
    --lib_foreground: hsl(0, 0%, 10%);
    --lib_transparent: hsl(0, 0%, 90%, 90%);
  }
  .lib_dark {
    --lib_background: hsl(0, 0%, 10%);
    --lib_background_progress: hsl(0, 0%, 20%);
    --lib_background_border: hsl(0, 0%, 30%);
    --lib_foreground_disabled: hsl(0, 0%, 70%);
    --lib_foreground: hsl(0, 0%, 90%);
    --lib_transparent: hsl(0, 0%, 10%, 90%);
  }

  /* [svg] */
  svg.cartesian {
    display:flex;
  }
  svg.cartesian > g {
    transform-origin: 50% 50%;
    transform: scaleY(-1);
  }
  svg.cartesian > g text {
    transform: scaleY(-1);
  }
}